@model OregonNexus.Broker.Web.ViewModels.IncomingRequests.CreateIncomingRequestViewModel
@using static OregonNexus.Broker.Web.Constants.Claims.CustomClaimType;
@using System.Text.Json;
@{
  var domain = (Model.ToDistrict != null) ? Model.ToDistrict.Domain : "";
}

<div class="space-y-10 divide-y divide-gray-900/10">
  <div class="px-4 sm:px-0">
    <div class="bg-white shadow-sm ring-1 ring-gray-900/5 sm:rounded-xl">
      <div class="px-4 py-6 sm:p-8 grid gap-8">
          <div class="grid gap-6 border-b border-gray-900/10 pb-8">
            <div>
              <h2 class="text-base font-semibold leading-7 text-gray-900">Student Lookup</h2>
              <p class="mt-1 text-sm leading-6 text-gray-600">Find the student in your SIS. This is the student record for which the records will be imported.</p>
            </div>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-2">
                <label class="block text-sm font-medium leading-6 text-gray-900">Student</label>
                <div class="mt-2">
                  <Search-Select asp-for="StudentUniqueId" placeholder="@Model.FirstName @Model.LastSurname" template="student">
                </div>
              </div>
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.StudentUniqueId, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="StudentUniqueId" type="text" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                  <input asp-for="Additional" type="hidden">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="StudentUniqueId">@Html.ValidationMessageFor(m => m.StudentUniqueId)</p>
              </div>
            </div>
          </div>
          <div class="grid gap-6 border-b border-gray-900/10 pb-8">
            <div>
              <h2 class="text-base font-semibold leading-7 text-gray-900">Student information</h2>
              <p class="mt-1 text-sm leading-6 text-gray-600">Basic information about the student being enrolled.</p>
            </div>  
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.FirstName, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="FirstName" type="text" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="FirstName">@Html.ValidationMessageFor(m => m.FirstName)</p>
              </div>
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.MiddleName, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="MiddleName" type="text" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="MiddleName">@Html.ValidationMessageFor(m => m.MiddleName)</p>
              </div>
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.LastSurname, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="LastSurname" type="text" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="LastSurname">@Html.ValidationMessageFor(m => m.LastSurname)</p>
              </div>
            </div>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.BirthDate, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="BirthDate" type="date" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="BirthDate">@Html.ValidationMessageFor(m => m.BirthDate)</p>
              </div>
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.Gender, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                    <select
                      asp-for="Gender"
                      asp-items="@Model.Genders"
                      class="block w-full rounded-md border-0 py-1.5 px-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                      <option value="">Select a Gender</option>
                    </select>
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="Gender">@Html.ValidationMessageFor(m => m.Gender)</p>
              </div>
              <div class="sm:col-span-2">
                @Html.LabelFor(it => it.Grade, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <input asp-for="Grade" type="text" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="Grade">@Html.ValidationMessageFor(m => m.Grade)</p>
              </div>
            </div>
          </div>
          <div class="grid gap-6 border-b border-gray-900/10 pb-8">
            <div>
              <h2 class="text-base font-semibold leading-7 text-gray-900">Requesting School Information</h2>
              <p class="mt-1 text-sm leading-6 text-gray-600">School that is requesting the records.</p>
            </div>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-4">
                <label class="block text-sm font-medium leading-6 text-gray-900">Requesting School</label>
                <div class="mt-2">
                  <Select asp-for="EducationOrganizationId" asp-items="Model.SelectEducationOrganizations" class="block w-full rounded-md border-0 py-1.5 px-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6"></Select>
                </div>
              </div>
            </div>
          </div>
          <div class="grid gap-6 border-b border-gray-900/10 pb-8" x-data="{
                search: '',
                filter: '',
                show: false,
                selected: null,
                districtForDisplay: '',
                schoolForDisplay: '',
                schoolRecordsContactForDisplay: '',
                focusedOptionIndex: null,
                options: null,
                district: null,
                close() { 
                    this.show = false;
                    this.filter = this.selectedName();
                    this.focusedOptionIndex = this.selected ? this.focusedOptionIndex : null;
                },
                open() { 
                    this.show = true; 
                },
                toggle() { 
                    if (this.show) {
                        this.close();
                    }
                    else {
                        this.open()
                    }
                },
                isOpen() { return this.show === true },
                selectedName() { return this.selected ? this.selected.name : this.filter; },
                classOption(id, index) {
                    const isSelected = this.selected ? (id == this.selected.id) : false;
                    const isFocused = (index == this.focusedOptionIndex);
                    return {
                        'cursor-pointer w-full border-gray-100 border-b hover:bg-blue-50': true,
                        'bg-blue-100': isSelected,
                        'bg-blue-50': isFocused
                    };
                },
                fetchSearch() {
                    if (this.search != null && this.search != undefined && this.search != '') {
                        fetch(`/api/v1/directory/search?domain=${encodeURIComponent(this.search)}`)
                            .then(response => {
                                if(!response.ok) {
                                    this.districtForDisplay = `Broker not found for ${this.search}`
                                } else {
                                    return response.json();
                                }
                            })
                            .catch((error) => console.log('Error:', error))
                            .then((data) => {
                                if (data != null) {
                                    this.options = data.schools; 
                                    this.district = data;
                                    this.formatDistrict();
                                    this.open();
                                }
                            });
                    }
                },
                formatDistrict() {
                    this.districtForDisplay = `${this.district.name} ${this.district.number}
${this.district.domain}`;
if (this.district.address != null) {
this.districtForDisplay += `
${this.district.address.streetNumberName}
${this.district.address.city}, ${this.district.address.stateAbbreviation} ${this.district.address.postalCode}`;
}
                },
                formatSchool() {
                  this.schoolForDisplay = `${this.selected.name} ${this.selected.number}`;
if (this.selected.address != null) {
    this.schoolForDisplay += `
${this.selected.address.streetNumberName}
${this.selected.address.city}, ${this.selected.address.stateAbbreviation} ${this.selected.address.postalCode}`;
}
                },
                formatSchoolContact() {
if (this.selected.contacts != null && this.selected.contacts[0] != null) {
                        this.schoolRecordsContactForDisplay = `${this.selected.contacts[0].name}
${this.selected.contacts[0].jobTitle}
${this.selected.contacts[0].phone}
${this.selected.contacts[0].email}`;
}
                },
                start() {
                  if ('@domain' != '') {
                    this.selected = JSON.parse('@JsonSerializer.Serialize(Model.ToSchool, new JsonSerializerOptions(JsonSerializerDefaults.Web))');
                    this.district = JSON.parse('@JsonSerializer.Serialize(Model.ToDistrict, new JsonSerializerOptions(JsonSerializerDefaults.Web))');
                    document.getElementById('Domain').placeholder = '@domain';
                    this.filter = this.selectedName();
                    this.formatDistrict(); this.formatSchool(); this.formatSchoolContact();
                  }
                },
                filteredOptions() {
                    return this.options ?? {}
                },
                onOptionClick(index) {
                    this.focusedOptionIndex = index;
                    this.selectOption();
                },
                selectOption() {
                    if (!this.isOpen()) {
                        return;
                    }
                    this.focusedOptionIndex = this.focusedOptionIndex ?? 0;
                    const selected = this.filteredOptions()[this.focusedOptionIndex]
                    if (this.selected && this.selected.id == selected.id) {
                        this.schoolForDisplay = '';
                    }
                    else {
                        this.selected = selected;
                        this.filter = this.selectedName();
                        this.formatSchool();
                        this.formatSchoolContact();
                    }
                    this.close();
                },
                focusPrevOption() {
                if (!this.isOpen()) {
                    return;
                }
                const optionsNum = Object.keys(this.filteredOptions()).length - 1;
                if (this.focusedOptionIndex > 0 && this.focusedOptionIndex <= optionsNum) {
                    this.focusedOptionIndex--;
                }
                else if (this.focusedOptionIndex == 0) {
                    this.focusedOptionIndex = optionsNum;
                }
                },
                focusNextOption() {
                const optionsNum = Object.keys(this.filteredOptions()).length - 1;
                if (!this.isOpen()) {
                    this.open();
                }
                if (this.focusedOptionIndex == null || this.focusedOptionIndex == optionsNum) {
                    this.focusedOptionIndex = 0;
                }
                else if (this.focusedOptionIndex >= 0 && this.focusedOptionIndex < optionsNum) {
                    this.focusedOptionIndex++;
                }
                }
            }" x-init="start();"">
          <div>
              <h2 class="text-base font-semibold leading-7 text-gray-900">Releasing school information</h2>
              <p class="mt-1 text-sm leading-6 text-gray-600">Information about the student's releasing school.</p>
          </div>
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-2">
                  <div class="block text-sm font-medium leading-6 text-gray-900">District Internet Address</div>
                  <div class="mt-2">
                      <input type="text" id="Domain" name="Domain" placeholder="example.org" x-model="search" @@keyup.debounce.500ms="fetchSearch()" aria-invalid="false" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6 valid">
                  </div>
              </div>
              <div class="sm:col-span-2">
                  <label class="block text-sm font-medium leading-6 text-gray-900">School</label>
                  <div class="mt-2">
                      <div class="flex flex-col items-center">
                          <div class="w-full">
                              <div class="flex flex-col items-center relative">
                                  <div class="w-full">
                                      <div @@click.away="close()"
                                          class="p-1 flex rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6">
                                          <input x-transition:leave="transition ease-in duration-100"
                                              x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"
                                              x-model="filter"
                                              @@mousedown="open()" 
                                              @@keydown.enter.stop.prevent="selectOption()"
                                              @@keydown.arrow-up.prevent="focusPrevOption()"
                                              @@keydown.arrow-down.prevent="focusNextOption()"
                                              readonly
                                              class="p-1 px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 w-full sm:text-sm sm:leading-6">
                                          <div class="text-gray-300 w-8 py-1 pl-2 pr-1 border-l flex items-center">
                                              <div @@click="toggle()"
                                                  class="cursor-pointer w-6 h-6 text-gray-600 outline-none focus:outline-none">
                                                  <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"
                                                      fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"
                                                      stroke-linecap="round" stroke-linejoin="round">
                                                      <polyline x-show="!isOpen()" points="18 15 12 20 6 15"></polyline>
                                                      <polyline x-show="isOpen()" points="18 15 12 9 6 15"></polyline>
                                                  </svg>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                                  <div x-show="isOpen()"
                                      class="absolute shadow bg-white top-100 z-40 w-full lef-0 rounded max-h-select overflow-y-auto svelte-5uyqqj">
                                      <div class="flex flex-col w-full">
                                          <template x-for="(option, index) in filteredOptions()" :key="index">
                                              <div @@click="onOptionClick(index)"
                                                  :class="classOption(option.studentId, index)"
                                                  :aria-selected="focusedOptionIndex === index">
                                                  <div
                                                      class="flex w-full items-center p-2 pl-2 border-transparent border-l-2 relative hover:border-teal-100">
                                                      <div class="w-full items-center flex">
                                                          <div class="mx-2 -mt-1"><span x-text="option.name"></span>
                                                              <div class="text-xs truncate w-full normal-case font-normal -mt-1 text-gray-500"
                                                                  x-text="option.id"></div>
                                                          </div>
                                                      </div>
                                                  </div>
                                              </div>
                                          </template>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-2">
                  <div class="block text-sm font-medium leading-6 text-gray-900">District</div>
                  <div class="mt-2">
                      <textarea id="releasing_district" x-text="districtForDisplay" rows="4" readonly
                          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6"></textarea>
                      <input type="hidden" asp-for="ToDistrict" x-model="JSON.stringify(district)">
                  </div>
              </div>
              <div class="sm:col-span-2">
                  <label class="block text-sm font-medium leading-6 text-gray-900">School</label>
                  <div class="mt-2">
                      <textarea id="releasing_school" x-text="schoolForDisplay" rows="4" readonly
                          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6"></textarea>
                      <input type="hidden" asp-for="ToSchool" x-model="JSON.stringify(selected)">
                  </div>
              </div>
              <div class="sm:col-span-2">
                  <label class="block text-sm font-medium leading-6 text-gray-900">School Records Contact</label>
                  <div class="mt-2">
                      <textarea id="releasing_school_records_contact" x-text="schoolRecordsContactForDisplay" rows="4" readonly
                          class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6"></textarea>
                  </div>
              </div>
          </div>
      </div>
          <div class="grid gap-6 pb-8">
            <div>
              <h2 class="text-base font-semibold leading-7 text-gray-900">Additional information</h2>
              <p class="mt-1 text-sm leading-6 text-gray-600">Additional information about the student's request.</p>
            </div>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-6">
              <div class="sm:col-span-6">
                @Html.LabelFor(it => it.Note, new { @class = "block text-sm font-medium leading-6 text-gray-900" })
                <div class="mt-2">
                  <textarea asp-for="Note" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-tertiary-700 sm:text-sm sm:leading-6"></textarea>
                </div>
                <p class="mt-2 text-sm text-red-600" asp-validation-for="Note">@Html.ValidationMessageFor(m => m.Note)</p>
              </div>
              
            </div>
          </div>
      </div>

      <div class="flex items-center justify-end gap-x-6 border-t border-gray-900/10 px-4 py-4 sm:px-8">
        <a
          asp-controller="Incoming"
          asp-action="Index"
          asp-authorize
          asp-policy="@TransferIncomingRecords"
          class="text-sm font-semibold leading-6 text-gray-900"
        >
          Cancel
        </a>
        <input asp-for="RequestId" type="hidden" />
        <button
              type="submit"
              class="relative inline-flex items-center rounded-md bg-tertiary-700 px-3 py-2 text-center text-sm font-semibold ring-1 ring-inset ring-tertiary-800 text-white shadow-sm hover:bg-tertiary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-tertiary-700 focus:z-10"
        >Save</button>
      </div>
    </div>
  </div>
</div>