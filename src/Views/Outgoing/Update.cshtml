@model OregonNexus.Broker.Web.ViewModels.OutgoingRequests.CreateOutgoingRequestViewModel
@{
    // Copyright: 2023 Education Nexus Oregon
    // Author: Makoa Jacobsen, makoa@makoajacobsen.com
    ViewData["Title"] = "Outgoing Record Request Details";
    Layout = "_AuthenticatedLayout";
}

<div class="grid gap-6">
  <form x-data="outgoingForm" method="post" asp-action="Update" autocomplete="off">
    <input type="hidden" name="_METHOD" value="PUT" />
    <partial name="_form" for="@Model" />
  </form>
</div>

@section scripts
{
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('outgoingForm', () => {
        return {
          init() {
            this.fetchStudents()
          },

          studentUniqueId: @Html.Raw(Json.Serialize(Model.EdfiStudentUniqueId)),
          firstName: '',
          lastSurname: '',
          birthDate: '',

          isLoadingStudents: false,
          studentsError: '',
          students: [],
          matchedStudent: null,
          studentsNotFoundErrorMessage: 'No students were found using the provided search criteria. Try different search criteria.',

          isLoadingStudentData: false,
          studentDataError: '',
          studentData: null,
          studentDataNotFoundErrorMessage: 'No student data was found for the current matched student.',

          formatDate(date) {
            if (!date) return ''
            if (typeof date === "string")date = new Date(date)
            if (isNaN(date.getTime())) return 'Invalid Date'
            return date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })
          },

          selectStudent(student) {
            this.matchedStudent = student
            this.fetchStudentData(student)
          },

          findStudents() {
            this.clearStudentMatch()
            this.clearStudentResults()
            this.clearStudentData()
            this.fetchStudents()
          },

          clearStudentMatch() {
            this.studentUniqueId = null
            this.matchedStudent = null
          },

          clearStudentResults() {
            this.students = []
          },

          clearStudentData() {
            this.studentData = null
          },

          async fetchStudents() {
            try {
              this.studentsError = ''

              this.isLoadingStudents = true

              const params = new URLSearchParams()
              params.append("firstName", this.firstName)
              params.append("lastSurname", this.lastSurname)
              params.append("birthDate", this.birthDate)

              const response = await fetch(`${window.location.origin}/api/students?${params.toString()}`);

              if (!response.ok) {
                throw new Error(this.studentsNotFoundErrorMessage)
              }

              const items = await response.json()

              if (items.length === 0) {
                throw new Error(this.studentsNotFoundErrorMessage)
              }

              this.students = items
            } catch (error) {
              this.studentsError = error.message
              this.students = []
            } finally {
              this.isLoadingStudents = false
            }
          },

          async fetchStudentData(student) {
            try {
              this.studentDataError = ''

              this.isLoadingStudentData = true

              const response = await fetch(`${window.location.origin}/api/students/${student.studentUniqueId}`);

              if (!response.ok) {
                throw new Error(this.studentDataNotFoundErrorMessage)
              }

              const data = await response.json()

              this.studentData = data
            } catch (error) {
              this.studentDataError = error.message
              this.studentData = null
            } finally {
              this.isLoadingStudentData = false
            }
          },
        }
    })
  })
</script>
}
